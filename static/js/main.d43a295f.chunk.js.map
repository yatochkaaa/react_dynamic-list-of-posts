{"version":3,"sources":["components/PostsList/PostsList.tsx","api/api.ts","api/comments.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","api/posts.ts","App.tsx","index.tsx"],"names":["PostsList","props","posts","selectedPostId","setSelectedPostId","className","map","post","userId","body","id","type","onClick","BASE_URL","requestStudents","a","fetch","response","ok","Error","status","statusText","json","getPostComments","postId","comments","filter","comment","createComment","name","email","method","headers","JSON","stringify","result","deleteComment","NewCommentForm","updateDetails","useState","setName","setEmail","setBody","handleFormSubmit","event","preventDefault","placeholder","value","onChange","target","PostDetails","postDetails","showComments","setShowComments","isShowComments","length","requestPosts","getPostDetails","App","users","setUsers","setPosts","selectedUser","setSelectedUser","setPostDetails","postComments","setComments","updateData","usersFromServer","postsFromServer","useEffect","postDetailsFromServer","postCommentsFromServer","htmlFor","user","toString","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d43a295f.chunk.js","sourcesContent":["import React from 'react';\nimport { Post } from '../../types/types';\nimport './PostsList.scss';\n\ninterface Props {\n  posts: Post[];\n  selectedPostId: number;\n  setSelectedPostId: (id: number) => void;\n}\n\nexport const PostsList: React.FC<Props> = (props) => {\n  const { posts, selectedPostId, setSelectedPostId } = props;\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {posts.map((post: Post) => (\n          <li key={post.id} className=\"PostsList__item\">\n            <div>\n              <b>{`[User #${post.userId}]`}</b>\n              {post.body}\n            </div>\n\n            {selectedPostId === post.id ? (\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => {\n                  setSelectedPostId(0);\n                }}\n              >\n                Close\n              </button>\n            ) : (\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => {\n                  setSelectedPostId(post.id);\n                }}\n              >\n                Open\n              </button>\n            )}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","export const BASE_URL = 'https://mate.academy/students-api/';\n\nexport const requestStudents = async () => {\n  const response = await fetch(`${BASE_URL}/users`);\n\n  if (!response.ok) {\n    throw new Error(`${response.status} - ${response.statusText}`);\n  }\n\n  return response.json();\n};\n","import { BASE_URL } from './api';\nimport { Comment } from '../types/types';\n\nexport const getPostComments = async (postId: number): Promise<Comment[]> => {\n  const response = await fetch(`${BASE_URL}/comments`);\n\n  if (!response.ok) {\n    throw new Error(`${response.status} - ${response.statusText}`);\n  }\n\n  const comments = await response.json();\n\n  return comments.filter((comment: Comment) => postId === comment.postId);\n};\n\nexport const createComment = async (\n  postId: number,\n  name: string,\n  email: string,\n  body: string,\n) => {\n  const response = await fetch(`${BASE_URL}/comments`, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json;charset=utf-8',\n    },\n    body: JSON.stringify({\n      postId,\n      name,\n      email,\n      body,\n    }),\n  });\n\n  const result = await response.json();\n\n  return result;\n};\n\nexport const deleteComment = async (id: number) => {\n  const response = await fetch(`${BASE_URL}/comments/${id}`, { method: 'DELETE' });\n\n  const result = await response.json();\n\n  return result;\n};\n","import React, { useState } from 'react';\nimport { createComment } from '../../api/comments';\nimport './NewCommentForm.scss';\n\ninterface Props {\n  postId: number;\n  updateDetails: () => void;\n}\n\nexport const NewCommentForm: React.FC<Props> = (props) => {\n  const { postId, updateDetails } = props;\n\n  const [name, setName] = useState<string>('');\n  const [email, setEmail] = useState<string>('');\n  const [body, setBody] = useState<string>('');\n\n  const clearForm = () => {\n    setName('');\n    setEmail('');\n    setBody('');\n  };\n\n  const handleFormSubmit = async (event: React.FormEvent) => {\n    event.preventDefault();\n    const comment = await createComment(postId, name, email, body);\n\n    if (comment) {\n      updateDetails();\n    }\n\n    clearForm();\n  };\n\n  return (\n    <form className=\"NewCommentForm\">\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={(event) => setName(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={(event) => setEmail(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input NewCommentForm__input--text-area\"\n          value={body}\n          onChange={(event) => setBody(event.target.value)}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n        onClick={handleFormSubmit}\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React, { useState } from 'react';\nimport { deleteComment } from '../../api/comments';\nimport { Post, Comment } from '../../types/types';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\ninterface Props {\n  postDetails: Post | null;\n  comments: Comment[];\n  selectedPostId: number;\n  updateDetails: () => void;\n}\n\nexport const PostDetails: React.FC<Props> = (props) => {\n  const {\n    comments,\n    postDetails,\n    selectedPostId,\n    updateDetails,\n  } = props;\n\n  const [showComments, setShowComments] = useState<boolean>(true);\n\n  const isShowComments = showComments ? 'Hide' : 'Show';\n\n  const removeComment = (id: number) => {\n    deleteComment(id);\n    updateDetails();\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{postDetails?.body}</p>\n      </section>\n\n      {comments.length ? (\n        <section className=\"PostDetails__comments\">\n          <button\n            type=\"button\"\n            className=\"button\"\n            onClick={() => {\n              setShowComments(!showComments);\n            }}\n          >\n            {`${isShowComments} ${comments.length} comments`}\n          </button>\n\n          {showComments && (\n            <ul className=\"PostDetails__list\">\n              {comments.map((comment: Comment) => (\n                <li key={comment.id}>\n                  <button\n                    type=\"button\"\n                    className=\"PostDetails__remove-button button\"\n                    onClick={() => removeComment(comment.id)}\n                  >\n                    X\n                  </button>\n\n                  <p>{`${comment.name} (${comment.email})`}</p>\n                  <br />\n                  <p>{comment.body}</p>\n                </li>\n              ))}\n            </ul>\n          )}\n        </section>\n      ) : 'No comments yet'}\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm postId={selectedPostId} updateDetails={updateDetails} />\n        </div>\n      </section>\n    </div>\n  );\n};\n","import { BASE_URL } from './api';\n\nexport const requestPosts = async () => {\n  const response = await fetch(`${BASE_URL}/posts`);\n\n  if (!response.ok) {\n    throw new Error(`${response.status} - ${response.statusText}`);\n  }\n\n  return response.json();\n};\n\nexport const getPostDetails = async (postId: number) => {\n  const response = await fetch(`${BASE_URL}/posts/${postId}`);\n\n  if (!response.ok) {\n    throw new Error(`${response.status} - ${response.statusText}`);\n  }\n\n  return response.json();\n};\n","import React, {\n  ChangeEvent,\n  useEffect,\n  useState,\n} from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { requestStudents } from './api/api';\nimport { requestPosts, getPostDetails } from './api/posts';\nimport { Comment, Post, User } from './types/types';\nimport { getPostComments } from './api/comments';\n\nconst App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [selectedUser, setSelectedUser] = useState<string>('0');\n  const [selectedPostId, setSelectedPostId] = useState<number>(0);\n  const [postDetails, setPostDetails] = useState<Post | null>(null);\n  const [postComments, setComments] = useState<Comment[]>([]);\n\n  const postsFilterBySelectedUser = () => {\n    if (selectedUser === '0') {\n      return posts;\n    }\n\n    return posts.filter((post: Post) => post.userId.toString() === selectedUser);\n  };\n\n  const updateData = async () => {\n    const usersFromServer = await requestStudents();\n    const postsFromServer = await requestPosts();\n\n    setUsers(usersFromServer);\n    setPosts(postsFromServer);\n  };\n\n  useEffect(() => {\n    updateData();\n  }, []);\n\n  const updateDetails = async () => {\n    const postDetailsFromServer = await getPostDetails(selectedPostId);\n    const postCommentsFromServer = await getPostComments(selectedPostId);\n\n    setPostDetails(postDetailsFromServer);\n    setComments(postCommentsFromServer);\n  };\n\n  useEffect(() => {\n    updateDetails();\n  }, [selectedPostId]);\n\n  const handleChange = (event: ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.target;\n\n    setSelectedUser(value);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label htmlFor=\"select\">\n          Select a user: &nbsp;\n\n          <select\n            id=\"select\"\n            className=\"App__user-selector\"\n            value={selectedUser}\n            onChange={handleChange}\n          >\n            <option value=\"0\">All users</option>\n            {users.map(user => (\n              <option key={user.id} value={user.id}>{user.name}</option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={postsFilterBySelectedUser()}\n            selectedPostId={selectedPostId}\n            setSelectedPostId={setSelectedPostId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {selectedPostId !== 0\n            ? (\n              <PostDetails\n                postDetails={postDetails}\n                comments={postComments}\n                selectedPostId={selectedPostId}\n                updateDetails={updateDetails}\n              />\n            )\n            : 'Open post to get info'}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}